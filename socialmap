#!/usr/bin/env perl

BEGIN {

    if (-x '/usr/bin/sqlite3') {

        system 'sqlite3 socialmap.db < lib/Model/Schema.sql'
          unless -e 'socialmap.db';
    }
}

use Mojolicious::Lite;
use REST::Google::Search qw/ LOCAL /;
use GIS::Distance;

use lib 'lib';
use Model::Schema;

my $MODEL = Model::Schema->connect('dbi:SQLite:socialmap.db');

### Welcome

get '/' => sub {

    my $self = shift;

    return $self->redirect_to('dashboard', layout => 'default')
      if $self->session('person_id');

    return $self->render('welcome', layout => 'default')
      if not $self->session('person_id');

} => 'welcome';

### Dashboard

get '/dashboard' => sub {

    my $self = shift;
    $self->session(page => 'dashboard');

    return $self->redirect_to('welcome') unless $self->session('person_id');

    my @people =
      $MODEL->resultset('Person')
      ->search(undef, {order_by => 'person_id ASC'});

    $self->{'people'} = \@people;

    $self->render('dashboard', layout => 'default');

} => 'dashboard';

post '/dashboard/update/:type/:id' => [type => qr/\w+/, id => qr/\d+/] => sub {

    my $self = shift;

    my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) =
      localtime(time);

    if ($self->param('type') eq 'person') {

        $MODEL->resultset('Person')->search({person_id => $self->param('id')})
          ->update(
            {   name       => $self->param('name'),
                first_name => $self->param('first_name'),
                last_name  => $self->param('last_name'),
                gender     => $self->param('gender'),
                birthday   => $self->param('birthday'),
                email      => $self->param('email'),
                timezone   => $self->param('timezone'),
                city       => $self->param('city'),
                region     => $self->param('region'),
                country    => $self->param('country'),
                avatar     => $self->param('avatar'),
                about     => $self->param('about')
            }
          );

    }
        
    return $self->redirect_to('dashboard');
    
};

### Person

get '/people' => sub {

    my $self = shift;
    $self->session(page => 'people');

    return $self->redirect_to('welcome') unless $self->session('person_id');

    my @people = $MODEL->resultset('Person')->search(
        undef,

        {   order_by => 'person_id DESC',
            prefetch => ['places', 'events'],
        }
    );

    for my $person (@people) {

        my $gis = GIS::Distance->new();

        my $distance = $gis->distance(
            $self->session('lat'), $self->session('lng') => $person->lat,
            $person->lng
        );

        if ($distance->meters <= (50 * 1609.344)) {

            push @{$self->{'people'}}, $person;
        }
    }

    $self->render('blank', layout => 'default')
      unless exists $self->{'people'};

    $self->render('people', layout => 'default');

} => 'people';

### Places

get '/places' => sub {

    my $self = shift;
    $self->session(page => 'places');

    return $self->redirect_to('welcome') unless $self->session('person_id');

    my @places = $MODEL->resultset('Place')->search(
        undef,

        {   order_by => 'place_id DESC',
            prefetch => 'events',
        }
    );

    for my $place (@places) {

        my $gis = GIS::Distance->new();

        my $distance = $gis->distance(
            $self->session('lat'), $self->session('lng') => $place->lat,
            $place->lng
        );

        if ($distance->meters <= (50 * 1609.344)) {

            push @{$self->{'places'}}, $place;
        }
    }

    $self->render('blank', layout => 'default')
      unless exists $self->{'places'};

    $self->render('places', layout => 'default');

} => 'places';

any '/places/submit/:type' => [type => qr/\w+/] => sub {

    my $self = shift;

    my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) =
      localtime(time);

    if ($self->param('type') eq 'place') {

        my $place = $MODEL->resultset('Place')->create(

            {   category       => $self->param('category'),
                title          => $self->param('title'),
                date           => "$year-$mon-$mday",
                time           => "$hour:$min:$sec",
                street_address => $self->param('street_address'),
                city           => $self->param('city'),
                region         => $self->param('region'),
                country        => $self->param('country'),
                lat            => $self->param('lat'),
                lng            => $self->param('lng'),
                popularity     => 0,
                person         => $self->session('person_id'),
            }
        );
    }

    if ($self->param('type') eq 'event') {

        my $event = $MODEL->resultset('PlaceEvent')->create(

            {   category   => $self->param('category'),
                title      => $self->param('title'),
                place      => $self->param('place'),
                start_date => $self->param('start_date'),
                stop_date  => $self->param('stop_date'),
                start_time => $self->param('start_time'),
                stop_time  => $self->param('stop_time'),
                about      => $self->param('about'),
                date       => "$year-$mon-$mday",
                time       => "$hour:$min:$sec",
                popularity => 0,
                person     => $self->session('person_id'),
            }
        );
    }

    return $self->redirect_to('places');

};

### Specific Page Information

get '/:page/:id' => [page => qr/\w+/, id => qr/\d+/] => sub {

    my $self = shift;

    if ($self->param('page') eq 'people') {

        return $self->redirect_to('welcome')
          unless $self->session('person_id');

        my @people =
          $MODEL->resultset('Person')
          ->search({person_id => $self->param('id')});

        $self->{'people'} = \@people;
        $self->render('people', layout => 'default');
    }

    elsif ($self->param('page') eq 'places') {

        my @places = $MODEL->resultset('Place')->search(

            {place_id => $self->param('id')},

            {   order_by => 'place_id DESC',
                prefetch => 'events',
            }
        );

        $self->{'places'} = \@places;
        $self->render('places', layout => 'default');
    }

};

#### Forms...

get '/login' => sub {

    my $self = shift;

    if (    ($self->param('name'))
        and ($self->param('email'))
        and ($self->param('location')))
    {

        REST::Google::Search->service(LOCAL);

        my $response =
          REST::Google::Search->new(q => $self->param('location'));

        if ($response->responseStatus == 200) {

            my $data    = $response->responseData;
            my @results = $data->results;

            foreach my $result (@results) {

                my $new_person = $MODEL->resultset('Person')->find_or_create(

                    {   name    => $self->param('name'),
                        email   => $self->param('email'),
                        city    => $result->city,
                        region  => $result->region,
                        country => $result->country,
                        avatar  => '/avatar.png',
                        about   => 'I love to use SocialMAP.',
                        lat     => $result->lat,
                        lng     => $result->lng,
                    }
                );

                my $session_person = $MODEL->resultset('Person')->search(
                    {   name   => $self->param('name'),
                        email  => $self->param('email'),
                        city   => $result->city,
                        region => $result->region
                    }
                )->first;

                $self->session(

                    person_id => $session_person->person_id,
                    name      => $session_person->name,
                    email     => $session_person->email,
                    city      => $session_person->city,
                    region    => $session_person->region,
                    country   => $session_person->country,
                    lat       => $session_person->lat,
                    lng       => $session_person->lng,
                );
            }
        }
        else {

            return $self->redirect_to('welcome');
        }
    }

    return $self->redirect_to('dashboard');

} => 'login';

get '/logout' => sub {

    my $self = shift;

    $self->session(expires => 1);
    $self->redirect_to('welcome');

} => 'logout';

post '/location' => sub {

    my $self = shift;

    if ($self->param('location')) {

        REST::Google::Search->service(LOCAL);

        my $response =
          REST::Google::Search->new(q => $self->param('location'));

        if ($response->responseStatus == 200) {

            my $data    = $response->responseData;
            my @results = $data->results;

            foreach my $result (@results) {

                $self->session(

                    city    => $result->city,
                    region  => $result->region,
                    country => $result->country,
                    lat     => $result->lat,
                    lng     => $result->lng,

                );
            }
        }
    }

    return $self->redirect_to($self->session('page'));

} => 'location';

app->secret('Insurgent Software Rocks!');
app->start;
