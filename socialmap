#!/usr/bin/env perl

BEGIN {

    if ( -x '/usr/bin/sqlite3' ) {

        system 'sqlite3 socialmap.db < lib/Model/Schema.sql'
          unless -e 'socialmap.db';
    }
}

use Mojolicious::Lite;
use REST::Google::Search qw/ LOCAL IMAGES /;
use GIS::Distance;

use lib 'lib';
use Model::Schema;

my $MODEL = Model::Schema->connect('dbi:SQLite:socialmap.db');

#### Welcome

get '/' => sub {

    my $self = shift;
    $self->session( page => 'welcome' );

    $self->session('user_id')
      ? $self->render( 'users',   layout => 'default' )
      : $self->render( 'welcome', layout => 'default' );

} => 'welcome';

### Users

get '/users' => sub {

    my $self = shift;
    $self->session( page => 'users' );

    return $self->redirect_to('welcome') unless $self->session('user_id');

    my @users =
      $MODEL->resultset('User')->search( undef, { order_by => 'user_id ASC' } );

    $self->{'users'} = \@users;

    $self->render( 'users', layout => 'default' );

} => 'users';

### Places

get '/places' => sub {

    my $self = shift;
    $self->session( page => 'places' );

    return $self->redirect_to('welcome') unless $self->session('user_id');

    my @places = $MODEL->resultset('Place')->search(
        undef,

        {
            order_by => 'place_id DESC',
            prefetch => 'events',
        }
    );

    for my $place (@places) {

        my $gis = GIS::Distance->new();

        my $distance = $gis->distance(
            $self->session('lat'), $self->session('lng') => $place->lat,
            $place->lng
        );

        # Display all known places within a 50 mile radius.
        if ( $distance->meters <= (50 * 1609.344) ) {

            push @{ $self->{'places'} }, $place;
        }
    }
        
    $self->render( 'blank', layout => 'default' )
        unless exists $self->{'places'};
        
    $self->render( 'places', layout => 'default' );    

} => 'places';

any '/places/post/:type' => [ type => qr/\w+/ ] => sub {

    my $self = shift;

    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
      localtime(time);

    if ( $self->param('type') eq 'place' ) {

        my $place = $MODEL->resultset('Place')->create(

            {
                category       => $self->param('category'),
                title          => $self->param('title'),
                date           => "$year-$mon-$mday",
                time           => "$hour:$min:$sec",
                street_address => $self->param('street_address'),
                city           => $self->param('city'),
                region         => $self->param('region'),
                country        => $self->param('country'),
                lat            => $self->param('lat'),
                lng            => $self->param('lng'),
                popularity     => 0,
                user           => $self->session('user_id'),
            }
        );
    }

    if ( $self->param('type') eq 'event' ) {

        my $event = $MODEL->resultset('PlaceEvent')->create(

            {
                category    => $self->param('category'),
                title       => $self->param('title'),
                place       => $self->param('place'),
                start_date  => $self->param('start_date'),
                stop_date   => $self->param('stop_date'),
                start_time  => $self->param('start_time'),
                stop_time   => $self->param('stop_time'),
                about       => $self->param('about'),
                date        => "$year-$mon-$mday",
                time        => "$hour:$min:$sec",
                popularity  => 0,
                user        => $self->session('user_id'),
            }
        );
    }

    return $self->redirect_to( $self->session('page') );

};

any '/:page/:id' => [ page => qr/\w+/, id => qr/\d+/ ] => sub {

    my $self = shift;

    if ( $self->param('page') eq 'users' ) {

        return $self->redirect_to('welcome') unless $self->session('user_id');

        my @users =
          $MODEL->resultset('User')
          ->search( { user_id => $self->param('id') } );

        $self->{'users'} = \@users;
        $self->render( 'users', layout => 'default' );
    }

    elsif ( $self->param('page') eq 'places' ) {

        my @places = $MODEL->resultset('Place')->search(

            { place_id => $self->param('id') },

            {
                order_by => 'place_id DESC',
                prefetch => 'events',
            }
        );

        $self->{'places'} = \@places;

        $self->render( 'places', layout => 'default' );
    }

};

#### Functions...

get '/session' => sub {

    my $self = shift;

    if ( $self->param('facebook_id') ) {

        my $existing_user = $MODEL->resultset('Place')->search( { facebook_id => $self->param('facebook_id') } )->first;

        if ( $existing_user->facebook_id eq $self->param('facebook_id') ) {

            $self->session(

                user_id     => $existing_user->user_id,
                facebook_id => $existing_user->facebook_id,
                name        => $existing_user->name,
                first_name  => $existing_user->first_name,
                last_name   => $existing_user->last_name,
                gender      => $existing_user->gender,
                birthday    => $existing_user->birthday,
                email       => $existing_user->email,
                timezone    => $existing_user->timezone,
                location    => $existing_user->location,
                city        => $existing_user->city,
                region      => $existing_user->region,
                country     => $existing_user->country,
                lat         => $existing_user->lat,
                lng         => $existing_user->lng,
            );

            return $self->redirect_to( $self->session('page') );
        }
        
        elsif ( not $existing_user ) {

            REST::Google::Search->service(LOCAL);

            my $response =
              REST::Google::Search->new( q => $self->param('location') );

            unless ( $response->responseStatus != 200 ) {

                my $data    = $response->responseData;
                my @results = $data->results;

                foreach my $result (@results) {

                    my $user = $MODEL->resultset('User')->create(

                        {
                            facebook_id => $self->param('facebook_id'),
                            name        => $self->param('name'),
                            first_name  => $self->param('first_name'),
                            last_name   => $self->param('last_name'),
                            gender      => $self->param('gender'),
                            birthday    => $self->param('birthday'),
                            email       => $self->param('email'),
                            timezone    => $self->param('timezone'),
                            location    => $self->param('location'),
                            city        => $result->city,
                            region      => $result->region,
                            country     => $result->country,
                            lat         => $result->lat,
                            lng         => $result->lng,
                        }
                    );
                }
            }
        }
        
    }
    elsif ( $self->param('expires') ) {

        $self->session( expires => $self->param('expires') );
    }

    return $self->redirect_to( $self->session('page') );

} => 'session';

#### Forms...

post '/location' => sub {

    my $self = shift;

    if ( $self->param('location') ) {

        REST::Google::Search->service(LOCAL);

        my $response =
          REST::Google::Search->new( q => $self->param('location') );

        unless ( $response->responseStatus != 200 ) {

            my $data    = $response->responseData;
            my @results = $data->results;

            foreach my $result (@results) {

                $self->session(

                    location => ''
                      . $result->city . ', '
                      . $result->region . '',
                    city    => $result->city,
                    region  => $result->region,
                    country => $result->country,
                    lat     => $result->lat,
                    lng     => $result->lng,

                );
            }
        }
    }

    return $self->redirect_to( $self->session('page') );

} => 'location';

app->secret('Insurgent Software Rocks!');
app->start;
