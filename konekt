#!/usr/bin/env perl

use Modern::Perl;

BEGIN {

    if (-x '/usr/bin/sqlite3') {

        system 'sqlite3 konekt.db < lib/Model/Schema.sql'
          unless -e 'konekt.db';
    }
}

use Mojolicious::Lite;
use REST::Google::Search qw/ LOCAL /;
use GIS::Distance;

use lib 'lib';
use Model::Schema;

my $MODEL = Model::Schema->connect('dbi:SQLite:konekt.db');

### Welcome

get '/' => sub {

    my $self = shift;

    return $self->redirect_to('dashboard', layout => 'default')
      if $self->session('person_id');

    return $self->render('welcome', layout => 'default')
      if not $self->session('person_id');

} => 'welcome';

### Dashboard

get '/dashboard' => sub {

    my $self = shift;
    $self->session(page => 'dashboard');

    return $self->redirect_to('welcome') unless $self->session('person_id');

    my $person = $MODEL->resultset('Person')->search(
        {person_id => $self->session('person_id')},

        {   order_by => 'person_id DESC',
            prefetch => 'tracks',
        }
    )->first;

    for (split /,/, $person->tracking) {

        push @{$self->{'tracking'}}, $MODEL->resultset('Person')->search(
            {person_id => $_},
            {   order_by => 'person_id DESC',
                prefetch => 'tracks',
            }
        )->first;
    }

    $self->{'person'} = $person;

    $self->render('dashboard', layout => 'default');

} => 'dashboard';

### People

get '/people' => sub {

    my $self = shift;
    $self->session(page => 'people');

    return $self->redirect_to('welcome') unless $self->session('person_id');

    my @people = $MODEL->resultset('Person')->search(
        undef,

        {   order_by => 'person_id DESC',

            #prefetch => ['events', 'events'],
        }
    );

    for my $person (@people) {

        my $gis = GIS::Distance->new();

        my $distance = $gis->distance(
            $self->session('lat'), $self->session('lng') => $person->lat,
            $person->lng
        );

        if ($distance->meters <= (50 * 1609.344)) {

            push @{$self->{'people'}}, $person;
        }
    }

    $self->render('blank', layout => 'default')
      unless exists $self->{'people'};

    $self->render('people', layout => 'default');

} => 'people';

### Person by ID

get '/person/:id' => [id => qr/\d+/] => sub {

    my $self = shift;
    $self->session(page => 'person');

    return $self->redirect_to('welcome')
      unless $self->session('person_id');

    my @people =
      $MODEL->resultset('Person')->search({person_id => $self->param('id')});

    $self->{'people'} = \@people;
    $self->render('people', layout => 'default');

};

### Events

get '/events' => sub {

    my $self = shift;
    $self->session(page => 'events');

    return $self->redirect_to('welcome') unless $self->session('person_id');

    my @events = $MODEL->resultset('Event')->search(
        undef,

        {   order_by => 'event_id DESC',
            prefetch => 'comments',
        }
    );

    for my $event (@events) {

        my $gis = GIS::Distance->new();

        my $distance = $gis->distance(
            $self->session('lat'), $self->session('lng') => $event->lat,
            $event->lng
        );

        if ($distance->meters <= (50 * 1609.344)) {

            push @{$self->{'events'}}, $event;
        }
    }

    $self->render('blank', layout => 'default')
      unless exists $self->{'events'};

    $self->render('events', layout => 'default');

} => 'events';

### Event by ID

get '/event/:id' => [id => qr/\d+/] => sub {

    my $self = shift;
    $self->session(page => 'event');

    my @events = $MODEL->resultset('Event')->search(

        {event_id => $self->param('id')},

        {   order_by => 'event_id DESC',
            prefetch => 'comments',
        }
    );

    $self->{'events'} = \@events;
    $self->render('events', layout => 'default');

};

### Discussions

get '/discussions' => sub {

    my $self = shift;
    $self->session(page => 'discussions');

    return $self->redirect_to('welcome') unless $self->session('person_id');

    $self->render('discussions', layout => 'default');

} => 'discussions';

## Classifieds

get '/classifieds' => sub {

    my $self = shift;
    $self->session(page => 'classifieds');

    return $self->redirect_to('welcome') unless $self->session('person_id');

    $self->render('classifieds', layout => 'default');

} => 'classifieds';

post '/signin' => sub {

    my $self = shift;

    if (($self->param('name')) and ($self->param('password'))) {

        my $session_person = $MODEL->resultset('Person')->search(
            {   name     => $self->param('name'),
                password => $self->param('password')
            }
        )->first;

        return $self->redirect_to('welcome') unless $session_person;

        $self->session(

            person_id => $session_person->person_id,
            name      => $session_person->name,
            city      => $session_person->city,
            region    => $session_person->region,
            country   => $session_person->country,
            lat       => $session_person->lat,
            lng       => $session_person->lng,
        );
    }

    return $self->redirect_to('dashboard');

};

post '/signup' => sub {

    my $self = shift;

    if (    ($self->param('name'))
        and ($self->param('location'))
        and ($self->param('email_1'))
        and ($self->param('email_2'))
        and ($self->param('password_1'))
        and ($self->param('password_2')))
    {

        return if $self->param('email_1')    ne $self->param('email_2');
        return if $self->param('password_1') ne $self->param('password_2');

        REST::Google::Search->service(LOCAL);

        my $response =
          REST::Google::Search->new(q => $self->param('location'));

        if ($response->responseStatus == 200) {

            my $data    = $response->responseData;
            my @results = $data->results;

            foreach my $result (@results) {

                my $new_person = $MODEL->resultset('Person')->create(

                    {   name       => $self->param('name'),
                        email      => $self->param('email_1'),
                        password   => $self->param('password_1'),
                        city       => $result->city,
                        region     => $result->region,
                        country    => $result->country,
                        avatar     => '/avatar.png',
                        blurb      => 'I love to use Konekt.',
                        lat        => $result->lat,
                        lng        => $result->lng,
                        popularity => 0,
                    }
                );

                my $session_person = $MODEL->resultset('Person')->search(
                    {   name     => $self->param('name'),
                        password => $self->param('password_1')
                    }
                )->first;

                $self->session(

                    person_id => $session_person->person_id,
                    name      => $session_person->name,
                    email     => $session_person->email,
                    city      => $session_person->city,
                    region    => $session_person->region,
                    country   => $session_person->country,
                    lat       => $session_person->lat,
                    lng       => $session_person->lng,
                );
            }
        }
    }

    return $self->redirect_to('dashboard');

};

get '/signout' => sub {

    my $self = shift;

    $self->session(expires => 1);
    $self->redirect_to('welcome');

};

post '/location' => sub {

    my $self = shift;

    if ($self->param('location')) {

        REST::Google::Search->service(LOCAL);

        my $response =
          REST::Google::Search->new(q => $self->param('location'));

        if ($response->responseStatus == 200) {

            my $data    = $response->responseData;
            my @results = $data->results;

            foreach my $result (@results) {

                $self->session(

                    city    => $result->city,
                    region  => $result->region,
                    country => $result->country,
                    lat     => $result->lat,
                    lng     => $result->lng,
                );
            }
        }
    }

    return $self->redirect_to($self->session('page'));

};

post '/tracking/:type/:id' => [type => qr/\w+/, id => qr/\d+/] => sub {

    my $self = shift;

    if ($self->param('type') eq 'person') {

        my $person =
          $MODEL->resultset('Person')
          ->search({person_id => $self->session('person_id')})->first;

        my @current_tracking = split /,/, $person->tracking;

        my @new_tracking;

        for (@current_tracking) {

            push @new_tracking, $_ unless $_ == $self->param('id');
        }

        if ($self->param('start')) {

            push @new_tracking, $self->param('id');

            my $csv = join ',', @new_tracking;

            $MODEL->resultset('Person')
              ->search({person_id => $self->session('person_id')})
              ->update({tracking => $csv});
        }
        elsif ($self->param('stop')) {

            my $csv = join ',', @new_tracking;

            $MODEL->resultset('Person')
              ->search({person_id => $self->session('person_id')})
              ->update({tracking => $csv});
        }
    }

};

post '/submit/:type' => [type => qr/\w+/] => sub {

    my $self = shift;

    my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) =
      localtime(time);

    if ($self->param('type') eq 'event') {
        
        my $event_id = $self->param('id');

        REST::Google::Search->service(LOCAL);

        my $response =
          REST::Google::Search->new(q => $self->param('location'));

        if ($response->responseStatus == 200) {

            my $data    = $response->responseData;
            my @results = $data->results;

            foreach my $result (@results) {

                my $event = $MODEL->resultset('Event')->create(

                    {   category       => $self->param('category'),
                        title          => $self->param('title'),
                        start_date     => $self->param('start_date'),
                        stop_date      => $self->param('stop_date'),
                        start_time     => $self->param('start_time'),
                        stop_time      => $self->param('stop_time'),
                        about          => $self->param('about'),
                        date           => "$year-$mon-$mday",
                        time           => "$hour:$min:$sec",
                        street_address => $result->streetAddress,
                        city           => $result->city,
                        region         => $result->region,
                        country        => $result->country,
                        lat            => $result->lat,
                        lng            => $result->lng,
                        popularity     => 0,
                        person         => $self->session('person_id'),
                    }
                );

                my $track = $MODEL->resultset('PersonTrack')->create(

                    {   date    => "$year-$mon-$mday",
                        time    => "$hour:$min:$sec",
                        comment => 'Just submitted a event to Konekt.',
                        link    => '/event/' . $event->event_id,
                        person  => $self->session('person_id'),
                    }
                );
            }
        }

        return $self->redirect_to('events');
    }

};

post '/update/:type/:id' => [type => qr/\w+/, id => qr/\d+/] => sub {

    my $self = shift;

    if ($self->param('type') eq 'person') {

        return if $self->param('password_1') ne $self->param('password_2');
        
        REST::Google::Search->service(LOCAL);

        my $response =
          REST::Google::Search->new(q => $self->param('location'));

        if ($response->responseStatus == 200) {

            my $data    = $response->responseData;
            my @results = $data->results;

            foreach my $result (@results) {
                
                $MODEL->resultset('Person')->search({person_id => $self->param('id')})
                    ->update(
                      {   name       => $self->param('name'),
                          first_name => $self->param('first_name'),
                          last_name  => $self->param('last_name'),
                          gender     => $self->param('gender'),
                          birthday   => $self->param('birthday'),
                          email      => $self->param('email'),
                          city       => $result->city,
                          region     => $result->region,
                          country    => $result->country,
                          lat        => $result->lat,
                          lng        => $result->lng,
                          avatar     => $self->param('avatar'),
                          blurb      => $self->param('blurb'),
                          password   => $self->param('password_1')
                      }
                    );             
            }
        }

    }

    return $self->redirect_to('dashboard');

};

app->secret('Insurgent Software Rocks!');
app->start;
