#!/usr/bin/env perl

use Modern::Perl;

BEGIN {

    if (-x '/usr/bin/sqlite3') {

        system 'sqlite3 konekt.db < lib/Model/Schema.sql'
          unless -e 'konekt.db';
    }
}

use REST::Google::Search qw/ LOCAL /;
use Crypt::SaltedHash;
use GIS::Distance;
use DateTime;

use lib 'lib';
use Model::Schema;

our $MODEL = Model::Schema->connect('dbi:SQLite:konekt.db');

use Mojolicious::Lite;

### Welcome

get '/' => sub {

    my $self = shift;

    return $self->redirect_to('dashboard', layout => 'default')
      if $self->session('person_id');

    return $self->render('welcome', layout => 'default')
      if not $self->session('person_id');

} => 'welcome';

### Dashboard

get '/dashboard' => sub {

    my $self = shift;

    return $self->redirect_to('welcome') unless $self->session('person_id');

    my $person = $MODEL->resultset('Person')->search(
        {person_id => $self->session('person_id')},

        {   order_by => 'person_id DESC',
            prefetch => 'tracks',
        }
    )->first;

    for (split /,/, $person->tracking) {

        push @{$self->{'tracking'}}, $MODEL->resultset('Person')->search(
            {person_id => $_},
            {   order_by => 'person_id DESC',
                prefetch => 'tracks',
            }
        )->first;
    }

    $self->{'person'} = $person;

    $self->{'people'} =
      prepare_content('Person', 'person_id', 'tracks', $self->session('lat'),
        $self->session('lng'));

    $self->{'events'} =
      prepare_content('Event', 'event_id', 'comments', $self->session('lat'),
        $self->session('lng'));

    $self->{'places'} =
      prepare_content('Place', 'place_id', 'comments', $self->session('lat'),
        $self->session('lng'));

    $self->{'discussions'} =
      prepare_content('Discussion', 'discussion_id', 'comments',
        $self->session('lat'), $self->session('lng'));

    $self->{'classifieds'} =
      prepare_content('Classified', 'classified_id', 'comments',
        $self->session('lat'), $self->session('lng'));

    $self->render('dashboard', layout => 'default');

} => 'dashboard';

## Commands

post '/signin' => sub {

    my $self = shift;

    if (($self->param('name')) and ($self->param('password'))) {

        my @people =
          $MODEL->resultset('Person')->search({name => $self->param('name')});

        for (@people) {

            if (Crypt::SaltedHash->validate(
                    $_->password, $self->param('password')
                )
              )
            {

                $self->session(

                    person_id => $_->person_id,
                    name      => $_->name,
                    city      => $_->city,
                    region    => $_->region,
                    country   => $_->country,
                    lat       => $_->lat,
                    lng       => $_->lng
                );

                return $self->redirect_to('welcome');
            }
        }
    }

    return $self->redirect_to('dashboard');

};

post '/signup' => sub {

    my $self = shift;

    if (    ($self->param('name'))
        and ($self->param('location'))
        and ($self->param('email_1'))
        and ($self->param('email_2'))
        and ($self->param('password_1'))
        and ($self->param('password_2')))
    {

        return if $self->param('email_1')    ne $self->param('email_2');
        return if $self->param('password_1') ne $self->param('password_2');

        my @results = google_local($self->param('location'));

        for (@results) {

            my $new_person = $MODEL->resultset('Person')->create(

                {   name     => $self->param('name'),
                    email    => $self->param('email_1'),
                    password => salt_password($self->param('password_1')),
                    city     => $_->city,
                    region   => $_->region,
                    country  => $_->country,
                    avatar   => '/avatar.png',
                    blurb    => 'This place is cool!',
                    lat      => $_->lat,
                    lng      => $_->lng,
                    datetime => DateTime->now,
                }
            );

            $self->session(

                person_id => $new_person->person_id,
                name      => $new_person->name,
                email     => $new_person->email,
                city      => $new_person->city,
                region    => $new_person->region,
                country   => $new_person->country,
                lat       => $new_person->lat,
                lng       => $new_person->lng,
            );
        }
    }

    return $self->redirect_to('dashboard');

};

get '/signout' => sub {

    my $self = shift;

    $self->session(expires => 1);
    $self->redirect_to('welcome');

};

post '/location' => sub {

    my $self = shift;

    if ($self->param('location')) {

        my @results = google_local($self->param('location'));

        for (@results) {

            $self->session(

                city    => $_->city,
                region  => $_->region,
                country => $_->country,
                lat     => $_->lat,
                lng     => $_->lng,
            );
        }
    }

    return $self->redirect_to('dashboard');

};

post '/tracking/:type/:id' => [type => qr/\w+/, id => qr/\d+/] => sub {

    my $self = shift;

    if ($self->param('type') eq 'person') {

        my $person =
          $MODEL->resultset('Person')
          ->search({person_id => $self->session('person_id')})->first;

        my @current_tracking = split /,/, $person->tracking;

        my @new_tracking;

        for (@current_tracking) {

            push @new_tracking, $_ unless $_ == $self->param('id');
        }

        if ($self->param('start')) {

            push @new_tracking, $self->param('id');

            my $csv = join ',', @new_tracking;

            $MODEL->resultset('Person')
              ->search({person_id => $self->session('person_id')})
              ->update({tracking => $csv});
        }
        elsif ($self->param('stop')) {

            my $csv = join ',', @new_tracking;

            $MODEL->resultset('Person')
              ->search({person_id => $self->session('person_id')})
              ->update({tracking => $csv});
        }
    }

};

post '/comment/:type/:id' => [type => qr/\w+/, id => qr/\d+/] => sub {

    my $self = shift;

    if ($self->param('type') eq 'event') {

        $MODEL->resultset('EventComment')->create(

            {   datetime => DateTime->now,
                comment  => $self->param('comment'),
                event    => $self->param('id'),
                person   => $self->session('person_id'),
            }
        );
    }

    if ($self->param('type') eq 'place') {

        $MODEL->resultset('PlaceComment')->create(

            {   datetime => DateTime->now,
                comment  => $self->param('comment'),
                place    => $self->param('id'),
                person   => $self->session('person_id'),
            }
        );
    }

    if ($self->param('type') eq 'discussion') {

        $MODEL->resultset('DiscussionComment')->create(

            {   datetime   => DateTime->now,
                comment    => $self->param('comment'),
                discussion => $self->param('id'),
                person     => $self->session('person_id'),
            }
        );
    }

    if ($self->param('type') eq 'classified') {

        $MODEL->resultset('ClassifiedComment')->create(

            {   datetime   => DateTime->now,
                comment    => $self->param('comment'),
                classified => $self->param('id'),
                person     => $self->session('person_id'),
            }
        );
    }

    return $self->redirect_to('dashboard');

};


post '/submit/:type' => [type => qr/\w+/] => sub {

    my $self = shift;

    if ($self->param('type') eq 'event') {

        my @results = google_local(
            $self->session('city') . ' ' . $self->session('region'));

        for (@results) {

            my $event = $MODEL->resultset('Event')->create(

                {   title          => $self->param('title'),
                    start_datetime => $self->param('start_date'),
                    stop_datetime  => $self->param('stop_date'),
                    about          => $self->param('about'),
                    street_address => $_->streetAddress,
                    city           => $_->city,
                    region         => $_->region,
                    country        => $_->country,
                    lat            => $_->lat,
                    lng            => $_->lng,
                    datetime       => DateTime->now,
                    person         => $self->session('person_id'),
                }
            );

            my $person_track = $MODEL->resultset('PersonTrack')->create(

                {   datetime => DateTime->now,
                    comment  => 'Just submitted a event.',
                    link     => '/event/' . $event->event_id,
                    person   => $self->session('person_id'),
                }
            );
        }
    }

    elsif ($self->param('type') eq 'place') {

        my @results = google_local($self->param('location'));

        for (@results) {

            my $place = $MODEL->resultset('Place')->create(

                {   category       => $self->param('category'),
                    title          => $_->titleNoFormatting,
                    about          => $self->param('about'),
                    street_address => $_->streetAddress,
                    city           => $_->city,
                    region         => $_->region,
                    country        => $_->country,
                    lat            => $_->lat,
                    lng            => $_->lng,
                    datetime       => DateTime->now,
                    person         => $self->session('person_id'),
                }
            );

            my $person_track = $MODEL->resultset('PersonTrack')->create(

                {   datetime => DateTime->now,
                    comment  => 'Just submitted a place.',
                    link     => '/place/' . $place->place_id,
                    person   => $self->session('person_id'),
                }
            );
        }
    }

    elsif ($self->param('type') eq 'discussion') {

        my @results = google_local(
            $self->session('city') . ' ' . $self->session('region'));

        for (@results) {

            my $discussion = $MODEL->resultset('Discussion')->create(

                {   category       => $self->param('category'),
                    title          => $self->param('title'),
                    about          => $self->param('about'),
                    street_address => $_->streetAddress,
                    city           => $_->city,
                    region         => $_->region,
                    country        => $_->country,
                    lat            => $_->lat,
                    lng            => $_->lng,
                    datetime       => DateTime->now,
                    person         => $self->session('person_id'),
                }
            );

            my $person_track = $MODEL->resultset('PersonTrack')->create(

                {   datetime => DateTime->now,
                    comment  => 'Just submitted a discussion.',
                    link     => '/discussion/' . $discussion->discussion_id,
                    person   => $self->session('person_id'),
                }
            );
        }
    }

    elsif ($self->param('type') eq 'classified') {

        my @results = google_local(
            $self->session('city') . ' ' . $self->session('region'));

        for (@results) {

            my $classified = $MODEL->resultset('Classified')->create(

                {   category       => $self->param('category'),
                    title          => $self->param('title'),
                    about          => $self->param('about'),
                    street_address => $_->streetAddress,
                    city           => $_->city,
                    region         => $_->region,
                    country        => $_->country,
                    lat            => $_->lat,
                    lng            => $_->lng,
                    price          => $self->param('price'),
                    datetime       => DateTime->now,
                    person         => $self->session('person_id'),
                }
            );

            my $person_track = $MODEL->resultset('PersonTrack')->create(

                {   datetime => DateTime->now,
                    comment  => 'Just submitted a classified.',
                    link     => '/classified/' . $classified->classified_id,
                    person   => $self->session('person_id'),
                }
            );
        }
    }

    return $self->redirect_to('dashboard');

};

post '/update/:type/:id' => [type => qr/\w+/, id => qr/\d+/] => sub {

    my $self = shift;

    if ($self->param('type') eq 'person') {

        return if $self->param('password_1') ne $self->param('password_2');

        my @results = google_local($self->param('location'));

        for (@results) {

            $MODEL->resultset('Person')
              ->search({person_id => $self->param('id')})->update(
                {   name       => $self->param('name'),
                    first_name => $self->param('first_name'),
                    last_name  => $self->param('last_name'),
                    gender     => $self->param('gender'),
                    birthday   => $self->param('birthday'),
                    email      => $self->param('email'),
                    city       => $_->city,
                    region     => $_->region,
                    country    => $_->country,
                    lat        => $_->lat,
                    lng        => $_->lng,
                    avatar     => $self->param('avatar'),
                    blurb      => $self->param('blurb'),
                    password   => salt_password($self->param('password_1'))
                }
              );
        }
    }

    return $self->redirect_to('dashboard');

};

### Tools

sub prepare_content {

    my ($result_set, $order_by, $prefetch, $lat, $lng) = @_;

    my @filtered_results;

    my @results = $MODEL->resultset($result_set)->search(
        undef,

        {   order_by => $order_by . ' DESC',
            prefetch => $prefetch,
        }
    );

    for (@results) {

        my $gis = GIS::Distance->new();

        my $distance = $gis->distance($lat, $lng => $_->lat, $_->lng);

        if ($distance->meters <= (50 * 1609.344)) {

            push @filtered_results, $_;
        }
    }

    return \@filtered_results;

}

sub insert_comment {

    my ($result_set, $comment, $type, $comment_id, $person_id) = @_;
    
    $MODEL->resultset($result_set)->create(

        {   datetime => DateTime->now,
            comment  => $comment,
            event    => $comment_id,
            person   => $person_id,
        }
    );
    
    return;
}

sub salt_password {

    my $crypt = Crypt::SaltedHash->new(algorithm => 'SHA-256');

    $crypt->add(shift);

    return $crypt->generate;

}

sub google_local {

    REST::Google::Search->service(LOCAL);

    my $response = REST::Google::Search->new(q => shift);

    if ($response->responseStatus == 200) {

        my $data = $response->responseData;
        return $data->results;
    }

}

app->secret('Insurgent Software Rocks!');
app->start;
