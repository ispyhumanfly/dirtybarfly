.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GIS::Distance::Formula::Vincenty 3pm"
.TH GIS::Distance::Formula::Vincenty 3pm "2010-02-01" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GIS::Distance::Formula::Vincenty \- Thaddeus Vincenty distance calculations.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For the benefit of the terminally obsessive (as well as the genuinely needy),
Thaddeus Vincenty devised formulae for calculating geodesic distances between
a pair of latitude/longitude points on the earth's surface, using an accurate
ellipsoidal model of the earth.
.PP
Vincenty's formula is accurate to within 0.5mm, or 0.000015", on the ellipsoid
being used. Calculations based on a spherical model, such as the (much simpler)
Haversine, are accurate to around 0.3% (which is still good enough for most
purposes, of course).
.PP
Note: the accuracy quoted by Vincenty applies to the theoretical ellipsoid
being used, which will differ (to varying degree) from the real earth geoid.
If you happen to be located in Colorado, 2km above msl, distances will be 0.03%
greater. In the \s-1UK\s0, if you measure the distance from Land's End to John O'
Groats using \s-1WGS\-84\s0, it will be 28m \- 0.003% \- greater than using the Airy
ellipsoid, which provides a better fit for the \s-1UK\s0.
.PP
\&\s-1NOTE:\s0 This formula is still considered alpha quality in GIS::Distance as it
hasn't been tested all that much.
.PP
Normally this module is not used directly.  Instead GIS::Distance
is used which in turn interfaces with the various formula classes.
.SH "FORMULA"
.IX Header "FORMULA"
.Vb 10
\&    a, b = major & minor semiaxes of the ellipsoid
\&    f = flattening (a\-b)/a
\&    L = lon2 \- lon1
\&    u1 = atan((1\-f) * tan(lat1))
\&    u2 = atan((1\-f) * tan(lat2))
\&    sin_u1 = sin(u1)
\&    cos_u1 = cos(u1)
\&    sin_u2 = sin(u2)
\&    cos_u2 = cos(u2)
\&    lambda = L
\&    lambda_pi = 2PI
\&    while abs(lambda\-lambda_pi) > 1e\-12
\&        sin_lambda = sin(lambda)
\&        cos_lambda = cos(lambda)
\&        sin_sigma = sqrt((cos_u2 * sin_lambda) * (cos_u2*sin_lambda) + 
\&            (cos_u1*sin_u2\-sin_u1*cos_u2*cos_lambda) * (cos_u1*sin_u2\-sin_u1*cos_u2*cos_lambda))
\&        cos_sigma = sin_u1*sin_u2 + cos_u1*cos_u2*cos_lambda
\&        sigma = atan2(sin_sigma, cos_sigma)
\&        alpha = asin(cos_u1 * cos_u2 * sin_lambda / sin_sigma)
\&        cos_sq_alpha = cos(alpha) * cos(alpha)
\&        cos2sigma_m = cos_sigma \- 2*sin_u1*sin_u2/cos_sq_alpha
\&        cc = f/16*cos_sq_alpha*(4+f*(4\-3*cos_sq_alpha))
\&        lambda_pi = lambda
\&        lambda = L + (1\-cc) * f * sin(alpha) *
\&            (sigma + cc*sin_sigma*(cos2sigma_m+cc*cos_sigma*(\-1+2*cos2sigma_m*cos2sigma_m)))
\&    }
\&    usq = cos_sq_alpha*(a*a\-b*b)/(b*b);
\&    aa = 1 + usq/16384*(4096+usq*(\-768+usq*(320\-175*usq)))
\&    bb = usq/1024 * (256+usq*(\-128+usq*(74\-47*usq)))
\&    delta_sigma = bb*sin_sigma*(cos2sigma_m+bb/4*(cos_sigma*(\-1+2*cos2sigma_m*cos2sigma_m)\-
\&      bb/6*cos2sigma_m*(\-3+4*sin_sigma*sin_sigma)*(\-3+4*cos2sigma_m*cos2sigma_m)))
\&    c = b*aa*(sigma\-delta_sigma)
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "distance"
.IX Subsection "distance"
This method is called by GIS::Distance's \fIdistance()\fR method.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
GIS::Distanc
.PP
GIS::Distance::Formula::Vincenty::Fast
.SH "RESOURCES"
.IX Header "RESOURCES"
<http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf>
.PP
<http://www.movable\-type.co.uk/scripts/LatLongVincenty.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Aran Clary Deltac <bluefeet@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
