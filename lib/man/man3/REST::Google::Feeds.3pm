.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "REST::Google::Feeds 3"
.TH REST::Google::Feeds 3 "2011-05-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
REST::Google::Feeds \- OO interface to Google Feeds API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use REST::Google::Feeds;
\&
\&        REST::Google::Feeds\->http_referer(\*(Aqhttp://example.com\*(Aq);
\&
\&        my $res = REST::Google::Feeds\->new(\*(Aqhttp://digg.com/rss/index.xml\*(Aq);
\&
\&        die "response status failure" if $res\->responseStatus != 200;
\&
\&        my $feed = $res\->responseData\->feed;
\&
\&        printf "title: %s\en", $feed\->title;
\&        printf "link: %s\en", $feed\->link;
\&        printf "description: %s\en", $feed\->description;
\&
\&        foreach my $e ( $feed\->entries ) {
\&                printf "\en";
\&                printf "title: %s\en", $e\->title;
\&                printf "link: %s\en", $e\->link;
\&                printf "date published: %s\en", $e\->publishedDate;
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`REST::Google::Feeds\*(C'\fR provides \s-1OO\s0 interface to Google \s-1REST\s0 (aka \s-1AJAX\s0) \s-1API\s0 for feeds.
.SH "METHODS"
.IX Header "METHODS"
.IP "_\|_PACKAGE_\|_\->\fIhttp_referer()\fR" 4
.IX Item "__PACKAGE__->http_referer()"
Get/set \s-1HTTP\s0 \f(CW\*(C`Referer\*(C'\fR header.
.Sp
\&\fINote:\fR Google says that you should supply a valid \s-1HTTP\s0 referer header each time you
perform a request to their \s-1AJAX\s0 \s-1API\s0, so \f(CW\*(C`new()\*(C'\fR raises warning unless referer is specified.
.IP "_\|_PACKAGE_\|_\->\fInew()\fR" 4
.IX Item "__PACKAGE__->new()"
\&\f(CW\*(C`q\*(C'\fR argument should contain \s-1URL\s0 to a valid \s-1RSS\s0 or Atom feed. 
Please refer to 'Google Feeds \s-1AJAX\s0 \s-1API\s0' documentation for complete list of arguments for Google Feeds service. E.g.:
.Sp
.Vb 3
\&        my $res = REST::Google::Feeds\->new(
\&                q => \*(Aqhttp://digg.com/rss/index.xml\*(Aq,
\&        );
.Ve
.Sp
The code above will perform a following \s-1HTTP\s0 \s-1GET\s0 request:
.Sp
.Vb 1
\&        http://ajax.googleapis.com/ajax/services/feed/load?q=http%3A%2F%2Fdigg.com%2Frss%2Findex.xml&v=1.0
.Ve
.Sp
\&\fINote:\fR You can left protocol version number unspecified while making your searches since
\&\f(CW\*(C`v=1.0\*(C'\fR is passed by default.
.Sp
See REST::Google \f(CW\*(C`new\*(C'\fR method.
.IP "responseData" 4
.IX Item "responseData"
Method returns \f(CW\*(C`REST::Google::Feeds::Data\*(C'\fR object, which has a single method \f(CW\*(C`feed\*(C'\fR.
.Sp
.Vb 3
\&        my $res = REST::Google::Feeds\->new(
\&                q => \*(Aqhttp://digg.com/rss/index.xml\*(Aq,
\&        );
\&
\&        my $feed = $res\->responseData\->feed;
.Ve
.IP "feed" 4
.IX Item "feed"
Method returns \f(CW\*(C`REST::Google::Feeds::Feed\*(C'\fR object, which has accessors for all incapsulated data.
.Sp
.Vb 3
\&        my $feed = $res\->responseData\->feed;
\&        print $feed\->title;
\&        print $feed\->link;
.Ve
.Sp
Attributes of \f(CW$feed\fR are:
.Sp
.Vb 6
\&        title
\&        link
\&        author
\&        description
\&        type
\&        entries
.Ve
.Sp
Obtaining feed entries:
.Sp
.Vb 3
\&        foreach my $entry ($feed\->entries) {
\&                print $entry\->title;
\&        }
.Ve
.Sp
Attributes of \f(CW$entry\fR are:
.Sp
.Vb 7
\&        title
\&        link
\&        author
\&        publishedDate
\&        contentSnippet
\&        content
\&        categories
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
REST::Google \- the base class for this module
.PP
<http://code.google.com/apis/ajaxfeeds/documentation/#fonje> \- Google Feeds \s-1AJAX\s0 \s-1API\s0
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2008, Eugen Sobchenko <ejs@cpan.org> and Sergey Sinkovskiy <glorybox@cpan.org>
.PP
This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
