.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Class::Measure 3pm"
.TH Class::Measure 3pm "2009-06-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Class::Measure \- Create, compare, and convert units of measurement.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See Class::Measure::Length for some examples.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a base class that is inherited by the Class::Measure 
classes.  This distribution comes with the class Class::Measure::Length.
.PP
The classes Class::Measure::Area, Class::Measure::Mass, 
Class::Measure::Space, Class::Measure::Temperature, 
and Class::Measure::Volume are planned and will be added soon.
.PP
The methods described here are available in all Class::Measure classes.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $m = new Class::Measure::Length( 1, \*(Aqinch\*(Aq );
.Ve
.PP
Creates a new measurement object.  You must pass an initial 
measurement and default unit.
.PP
In most cases the measurement class that you are useing 
will export a method to create new measurements. For 
example Class::Measure::Length exports the 
\&\fIlength()\fR method.
.SS "unit"
.IX Subsection "unit"
.Vb 1
\&  my $unit = $m\->unit;
.Ve
.PP
Returns the object's default unit.
.SS "set_unit"
.IX Subsection "set_unit"
.Vb 1
\&  $m\->set_unit( \*(Aqfeet\*(Aq );
.Ve
.PP
Sets the default unit of the measurement.
.SS "value"
.IX Subsection "value"
.Vb 3
\&  my $yards = $m\->value(\*(Aqyards\*(Aq);
\&  my $val = $m\->value;
\&  print "$m is the same as $val when in a string\en";
.Ve
.PP
Retrieves the value of the measurement in the 
default unit.  You may specify a unit in which 
case the value is converted to the unit and returned.
.PP
This method is also used to handle overloading of 
stringifying the object.
.SS "set_value"
.IX Subsection "set_value"
.Vb 3
\&  my $m = length( 0, \*(Aqinches\*(Aq );
\&  $m\->set_value( 12 ); # 12 inches.
\&  $m\->set_value( 1, \*(Aqfoot\*(Aq ); # 1 foot.
.Ve
.PP
Sets the measurement in the default unit.  You may 
specify a new default unit as well.
.SS "reg_units"
.IX Subsection "reg_units"
.Vb 3
\&  Class::Measure::Length\->reg_units(
\&    \*(Aqinch\*(Aq, \*(Aqfoot\*(Aq, \*(Aqyard\*(Aq
\&  );
.Ve
.PP
Registers one or more units for use in the specified 
class.  Units should be in the singular, most common, 
form.
.SS "units"
.IX Subsection "units"
.Vb 1
\&  my @units = Class::Measure::Length\->units();
.Ve
.PP
Returns a list of all registered units.
.SS "reg_aliases"
.IX Subsection "reg_aliases"
.Vb 5
\&  Class::Measure::Length\->reg_aliases(
\&    [\*(Aqfeet\*(Aq,\*(Aqft\*(Aq] => \*(Aqfoot\*(Aq,
\&    [\*(Aqin\*(Aq,\*(Aqinches\*(Aq] => \*(Aqinch\*(Aq,
\&    \*(Aqyards\*(Aq => \*(Aqyard\*(Aq
\&  );
.Ve
.PP
Register alternate names for units.  Expects two 
arguments per unit to alias.  The first argument 
being the alias (scalar) or aliases (array ref), and 
the second argument being the unit to alias them to.
.SS "reg_convs"
.IX Subsection "reg_convs"
.Vb 4
\&  Class::Measure::Length\->reg_convs(
\&    12, \*(Aqinches\*(Aq => \*(Aqfoot\*(Aq,
\&    \*(Aqyard\*(Aq => \*(Aq3\*(Aq, \*(Aqfeet\*(Aq
\&  );
.Ve
.PP
Registers a unit conversion.  There are three distinct 
ways to specify a new conversion.  Each requires three 
arguments.
.PP
.Vb 2
\&  $count1, $unit1 => $unit2
\&  $unit1 => $count2, $unit2
.Ve
.PP
These first two syntaxes create automatic reverse conversions 
as well.  So, saying there are 12 inches in a foot implies 
that there are 1/12 feet in an inch.
.PP
.Vb 1
\&  $unit1 => $unit2, $sub
.Ve
.PP
The third syntax accepts a subroutine as the last argument 
the subroutine will be called with the value of \f(CW$unit1\fR and 
it's return value will be assigned to \f(CW$unit2\fR.  This 
third syntax does not create a reverse conversion automatically.
.SH "AUTHOR"
.IX Header "AUTHOR"
Aran Clary Deltac <bluefeet@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
